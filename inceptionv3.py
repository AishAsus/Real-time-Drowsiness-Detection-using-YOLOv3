# -*- coding: utf-8 -*-
"""aiswarya_inceptionv3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TVjOpBfer0_FgadB5sY_7_Wi0BnvLdcS
"""

# Check if GPU is enabled
import tensorflow as tf
print(tf.__version__)
print(tf.test.gpu_device_name())

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import tensorflow.keras.backend as K
from tensorflow.keras import regularizers
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Convolution2D, MaxPooling2D, ZeroPadding2D, GlobalAveragePooling2D, AveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint, CSVLogger
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.regularizers import l2
from tensorflow import keras
import numpy as np

# K.clear_session()

n_classes = 2
img_width, img_height = 299, 299
train_data_dir = '/content/drive/My Drive/yolov3/yolo/yoloface/dataset'
batch_size = 16

# weights='imagenet',
inception = InceptionV3(weights='imagenet',include_top=False)
inception.trainable=False
x = inception.output
x = GlobalAveragePooling2D()(x)
x = Dense(128,activation='relu')(x)
x = Dropout(0.2)(x)
x = Dense(128,activation='relu')(x)
x = Dropout(0.2)(x)
x = Dense(10,activation='relu')(x)
x = Dropout(0.2)(x)

predictions = Dense(n_classes, activation='softmax')(x)

model = Model(inputs=inception.input, outputs=predictions)

inception.input

model.summary()

train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.25)

# test_datagen = ImageDataGenerator(rescale=1. / 255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation')

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
checkpointer = ModelCheckpoint(filepath='best_model_class.hdf5', verbose=1, save_best_only=True)
csv_logger = CSVLogger('history.log')

history_class = model.fit_generator(train_generator,
                    steps_per_epoch = train_generator.samples // batch_size,
                    validation_data=validation_generator,
                    validation_steps=validation_generator.samples // batch_size,
                    epochs=200,
                    verbose=1,
                    callbacks=[csv_logger, checkpointer])

model.save('model_trained_class.hdf5')

model.save('model_trained_class.hdf5')



from google.colab import drive
drive.mount('/content/drive')

!cp model1_trained_class.hdf5 /content/drive/My\ Drive/yolov3/yolo/yoloface/

from tensorflow.keras.models import load_model
model=load_model('/content/drive/My Drive/yolov3/yolo/yoloface/model_trained_class.hdf5',compile=False)

# pred_value=[]
# gnd_truth=[]
import os
from tensorflow.keras.preprocessing import image
import numpy as np
for dirname, _, filenames in os.walk('/content/drive/My Drive/yolov3/yolo/yoloface/dataset/drowsy'):
  for filename in filenames:
    imgpath=dirname+'/'+filename
    # print(imgpath)
    img = image.load_img(imgpath, target_size=(299, 299))
    img = image.img_to_array(img)
    img=img/255              
    img = np.expand_dims(img, axis=0)         
    # img /= 255.                                      #

    pred = model.predict(img)
    index = np.argmax(pred)
    class_list=['drowsy','non-drowsy']
    class_list.sort()


    pred_value=class_list[index]

    # gnd_truth.append(dirname.split('/')[4])
    print(pred_value)

import time
start = time.process_time()
# your code here    

imgpath='/content/drive/My Drive/yolov3/yolo/yoloface/dataset/drowsy/img0008_0 (23).jpg'
# print(imgpath)
img = image.load_img(imgpath, target_size=(229, 229))
img = image.img_to_array(img)
img=img/255              
img = np.expand_dims(img, axis=0) 


pred = model.predict(img)
index = np.argmax(pred)
class_list=['drowsy','non-drowsy']
class_list.sort()


pred_value=class_list[index]

# gnd_truth.append(dirname.split('/')[4])
print(pred_value)

print(time.process_time() - start)

import matplotlib.pyplot as plt

history=history_class
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
epochs = range(len(acc))

plt.plot(acc, label='training accuracy')
plt.plot(val_acc, label='validation accuracy')
plt.title('Accuracy curve')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.plot(loss, label='training loss')
plt.plot(val_loss, label='validation loss')
plt.title('Loss curve')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()

model.evaluate_generator(train_generator,verbose=1)

pred=model.predict(validation_generator)

train_generator.class_indices

index = np.argmax(pred)
class_list=['drowsy','non-drowsy']
class_list.sort()


pred_value=class_list[index]